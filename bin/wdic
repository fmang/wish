#!/usr/bin/perl -CA

=encoding utf8

=head1 NAME

wdic - Japanese dictionary lookup tool

=head1 SYNOPSIS

wdic [OPTIONS] [QUERY...]

=head1 DESCRIPTION

Wish is a Perl tool for looking up words and kanjis from a Japanese word and
kanji database. The current supported formats are KANJIDIC and EDICT2.

B<wdic> is its command-line front end.

=head2 Loading dictionaries

Before Wish can be used, the word database needs to be built using KANJIDIC and
EDICT2 files.

These dictionaries can be found at
L<http://www.csse.monash.edu.au/~jwb/kanjidic.html>
and L<http://www.edrdg.org/jmdict/edict.html>.

You can download and load them like this:

    wget http://ftp.monash.edu.au/pub/nihongo/kanjidic.gz
    gunzip kanjidic.gz
    wget http://ftp.monash.edu.au/pub/nihongo/edict2.gz
    gunzip edict2.gz

    # Build the database, takes a little while
    wdic --load --kanjidic kanjidic --edict edict2

=head2 Looking up words

You can supply your queries to B<wdic> as command-line arguments.

    $ wdic word1 word2

Results are displayed by default using the system pager, falling back to less,
and then to standard output if it doesn't seem to work. The pager is expected
to support ANSI colors, otherwise you should specify B<--nocolor>.

You can choose whether to display kanji information and homophones using the
B<--kanji> and B<--homophones> switches.

=head2 Interactive mode

When looking up many words, it's usually more convenient to use the REPL, a
prompt that keeps asking for your next query. Just call B<wdic> without a
query:

    $ wdic

=head2 Customizing the pager

The pager can be disabled from the command-line using the B<--nopager> switch.

You can tell B<wdic> the pager it should use from the B<PAGER> environment
variable.

By default, B<less> is used with the B<-R> switch to make it show colors. B<-e>
is also convenient, and enabled in interactive mode, to return to the prompt
after the end of the results is reached. B<less> can be customized with
B<lesskey> to make it exit when backspace is hit, as hitting I<q> in Japanese
mode will be caught by the IME in Japanese mode.

=head1 OPTIONS

=over 4

=item -d, B<--database>

Specify the location of the database directory.

By default, F<~/.wish> is used.

=item -l, B<--load>

Open the database in write mode.

The database directory is automatically created if it doesn't exist.

This switch is required if you want to load KANJIDIC or EDICT files using the
B<--kanjidic> and B<--edict> switches.

Performing word queries cannot be performed in this mode.

=item B<--kanjidic> I<FILE>

Load the specified KANJIDIC into the database. Requires the B<--load> switch.

=item B<--edict> I<FILE>

Load the specified EDICT2 into the databse. Requires the B<--load> switch.

=item B<--homophones>, B<--nohomophones>

Also search for homophones. By default, homophones are shown.

=item B<--kanji>, B<--nokanji>

Print kanji data along with words. By default, kanji information isn't shown.

=item B<--color>, B<--nocolor>

Enable or disable ANSI colors in the output.

=item B<--pager>, B<--nopager>

Display the results in a pager. Default pager is C<less -R> if $PAGER isn't
defined.

This option is enabled by default when the standard output is a terminal.

=item B<--help>

Display a brief help, along with the version number.

=back

=cut

use strict;
use warnings;
use utf8;

use Encode qw(decode encode);
use File::Path qw(make_path);
use File::Spec::Functions qw(catdir);
use Getopt::Long qw(:config no_auto_abbrev);
use Term::ANSIColor;
use Term::ReadLine;
use Wish::Edict2;
use Wish::KanjiDic;
use Wish::Unicode qw(kanjis);

our $VERSION = '1.0';

my $usage = <<EOF;
Usage: wdic [OPTIONS] [QUERY...]
       wdic --load [--kanjidic FILE] [--edict FILE]
       wdic --help
EOF

my $help = <<EOF;
wdic version $VERSION

$usage
Options:
  -d, --database        Specify the location of the database directory.
  -l, --load            Open the database in write mode.
  --kanjidic FILE       Load the specified KANJIDIC into the database.
  --edict FILE          Load the specified EDICT2 into the databse.
  --[no]homophones      Also search for homophones.
  --[no]kanji           Print kanji data along with words.
  --[no]color           Enable or disable ANSI colors in the output.
  --[no]pager           Display the results in the system's pager.
  --help                Show this help.
EOF

my $dbdir = $ENV{HOME} ? catdir($ENV{HOME}, '.wish') : 'db';
my $load_mode;
my @kanjidic_files;
my @edict_files;
my $show_homophones = 1;
my $show_kanji = 0;
my $use_colors = -t STDOUT;
my $pager = $ENV{PAGER};
my $use_pager = -t STDOUT;
my $show_help;

GetOptions(
	'database|d=s' => \$dbdir,
	'load|l' => \$load_mode,
	'kanjidic=s' => \@kanjidic_files,
	'edict=s' => \@edict_files,
	'color!' => \$use_colors,
	'homophones!' => \$show_homophones,
	'kanji!' => \$show_kanji,
	'pager!' => \$use_pager,
	'help|h' => \$show_help,
) or die($usage);

if ($show_help) {
	print($help);
	exit(0);
}

if (!$load_mode and @kanjidic_files || @edict_files) {
	die("Cannot load a dictionary file without --load.\n");
}

if ($load_mode and @ARGV) {
	die("Please don't load and search at the same time.\n");
}

if ($load_mode && ! -d $dbdir) {
	print(STDERR "Creating the database directory $dbdir...\n");
	make_path($dbdir);
}

my $kanjidic = Wish::KanjiDic->new($dbdir, readonly => !$load_mode);
my $edict = Wish::Edict2->new($dbdir, readonly => !$load_mode);

$kanjidic && $edict or die("Couldn't open the dictionary database at $dbdir: $!.\n");

for my $file (@kanjidic_files) {
	print(STDERR "Loading KANJIDIC from $file...\n");
	my $s = $kanjidic->load($file);
	$s or warn("Couldn't load KANJIDIC from $file: $!.\n");
	$s and print(STDERR "Successfully loaded KANJIDIC from $file.\n");
}

for my $file (@edict_files) {
	print(STDERR "Loading EDICT2 from $file...\n");
	my $s = $edict->load($file);
	$s or warn("Couldn't load EDICT2 from $file: $!.\n");
	$s and print(STDERR "Successfully loaded EDICT2 from $file.\n");
}

if ($load_mode) {
	# work is done
	exit(0);
}

################################################################################
# Lookup part

sub c {
	my ($t, $c) = @_;
	$use_colors ? colored($t, $c) : $t;
}

sub pretty {
	my $e = shift;
	my $out;

	my $w = $e->{words} || $e->{readings};
	$w and $out .= join(' / ', map { c($_, 'blue') } @$w) . "\n";
	$e->{kanji} and $out .= c($e->{kanji}, 'blue') . "\n";

	my %elems = (
		on => '音', kun => '訓', nanori => '名', english => '英',
		readings => '読', meanings => '英', pos => '詞',
	);
	for my $f (qw/on kun nanori english readings pos meanings/) {
		next unless defined $e->{$f};
		$e->{words} or next if $f eq 'readings';
		$out .= '  ' . c($elems{$f}, 'green') . ' ';
		my $content = join($f eq 'pos' ? ', ' : "\n     ", @{$e->{$f}});
		$f eq 'kun' and $content =~ s/\.([^ ]*)/c("·$1", 'white')/e;
		$out .= "$content\n";
	}
	$out;
}

sub cut {
	my $n = shift;
	my $count = 0;
	my $out;
	for (@_) {
		$out .= $_;
		$count++;
		if ($count == $n) {
			$out .= "\n";
			$count = 0;
		}
	}
	$out;
}

sub highlight {
	my ($txt, $hl) = @_;
	$hl = quotemeta($hl);
	$txt =~ s/(\033[^m]*m)([^\033]*)($hl)/$1.$2.c($3, 'red').$1/egr;
}

sub do_search {
	$pager ||= 'less -R';
	local $SIG{PIPE} = 'IGNORE';
	open(OUT, $use_pager ? "| $pager" : '>&STDOUT') or open(OUT, '>&STDOUT');
	binmode(OUT, ':utf8');
	print(OUT "\n");
	for my $q (@_) {
		if ($q =~ /^[1-4]-[0-9]*-[0-9]*$/) {
			print(OUT c("ー SKIP $q\n\n", 'yellow'));
			my @r = sort($kanjidic->skip_lookup($q));
			@r and print(OUT cut(20, @r));
			@r or print(OUT c("Nothing found.", 'white'));
			print(OUT "\n\n");
			next;
		}

		my @kanjis = !$show_kanji ? () :
			map { $kanjidic->lookup($_) } kanjis($q);
		my @words = $edict->search($q);
		if ($show_homophones && $q =~ /\p{Han}/) {
			push(@words, $edict->homophones($q));
		}

		print(OUT c("ー $q\n\n", 'yellow'));
		$_ and print(OUT pretty($_), "\n") for @kanjis;
		$_ and print(OUT highlight(pretty($_), $q), "\n") for @words;
		@kanjis || @words or print(OUT c("Nothing found.\n\n", 'white'));
	}
	close(OUT);
}


if (@ARGV) {
	do_search(@ARGV);
} elsif (-t STDIN) {
	$pager ||= 'less -R -e';
	my $term = Term::ReadLine->new('wdic', \*STDIN, \*STDOUT);
	$term->ornaments(0);
	while (defined ($_ = $term->readline(c('検索> ', 'blue')))) {
		$_ = decode('UTF-8', $_);
		my @qs = split or next;
		do_search(@qs);
		$term->addhistory($_);
	}
	print("Bye.\n");
} else {
	binmode(STDIN, ':encoding(UTF-8)');
	do_search(map { split } <STDIN>);
}
